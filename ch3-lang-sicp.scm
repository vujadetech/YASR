#lang sicp

; *******************************************
; Ex 3.12
(define (last-pair-sicp x)
  (if (null? (cdr x))
      x
      (last-pair-sicp (cdr x))))

(define (append! x y)
  (set-cdr! (last-pair-sicp x) y)
  x)

(define xs '(1 2))
(define ys '(3))

(define x (list 'a 'b))
(define y (list 'c 'd))
(define z (append x y))
z
; (a b c d) normal append
(cdr x)
; <response> (b) like normal
(define w (append! x y))
w
; (a b c d)
(cdr x)
; <response> '(b c d) b/c x was changed so it pointed to y after the b.

; *******************************************
; Ex 3.13
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************
; *******************************************